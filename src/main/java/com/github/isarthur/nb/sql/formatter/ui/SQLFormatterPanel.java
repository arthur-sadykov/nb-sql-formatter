/*
 * Copyright 2020 Arthur Sadykov.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.isarthur.nb.sql.formatter.ui;

import com.github.isarthur.nb.sql.formatter.constants.ConstantDataManager;
import com.github.isarthur.nb.sql.formatter.dialect.CouchbaseN1QLlDialect;
import com.github.isarthur.nb.sql.formatter.dialect.Dialect;
import com.github.isarthur.nb.sql.formatter.dialect.IBMDB2Dialect;
import com.github.isarthur.nb.sql.formatter.dialect.OraclePLSQLDialect;
import com.github.isarthur.nb.sql.formatter.dialect.StandardSQLDialect;
import java.util.prefs.Preferences;
import org.openide.util.NbPreferences;

class SQLFormatterPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    private final SQLFormatterOptionsPanelController controller;

    SQLFormatterPanel(SQLFormatterOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialectLabel = new javax.swing.JLabel();
        dialectComboBox = new javax.swing.JComboBox<>();
        indentLabel = new javax.swing.JLabel();
        indentSpinner = new javax.swing.JSpinner();

        org.openide.awt.Mnemonics.setLocalizedText(dialectLabel, org.openide.util.NbBundle.getMessage(SQLFormatterPanel.class, "SQLFormatterPanel.dialectLabel.text")); // NOI18N

        dialectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new Dialect[] {new StandardSQLDialect(),
            new CouchbaseN1QLlDialect(), new IBMDB2Dialect(), new OraclePLSQLDialect()}));

org.openide.awt.Mnemonics.setLocalizedText(indentLabel, org.openide.util.NbBundle.getMessage(SQLFormatterPanel.class, "SQLFormatterPanel.indentLabel.text")); // NOI18N

indentSpinner.setModel(new javax.swing.SpinnerNumberModel(2, 0, 50, 1));

javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
this.setLayout(layout);
layout.setHorizontalGroup(
    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(indentLabel)
            .addComponent(dialectLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dialectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(indentSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(dialectLabel)
                .addComponent(dialectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(indentLabel)
                .addComponent(indentSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        Preferences p = getPreferencesForModule();
        dialectComboBox.setSelectedItem(getDialect());
        indentSpinner.setValue(p.getInt(ConstantDataManager.INDENT, ConstantDataManager.DEFAULT_INDENT));
    }

    private Dialect getDialect() {
        Preferences p = getPreferencesForModule();
        String dialectName = p.get(ConstantDataManager.DIALECT, ConstantDataManager.DEFAULT_DIALECT);
        return Dialect.get(dialectName);
    }

    void store() {
        Preferences p = getPreferencesForModule();
        p.put(ConstantDataManager.DIALECT, dialectComboBox.getSelectedItem().toString());
        p.putInt(ConstantDataManager.INDENT, (int) indentSpinner.getValue());
    }

    private Preferences getPreferencesForModule() {
        return NbPreferences.forModule(SQLFormatterPanel.class);
    }

    boolean valid() {
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Dialect> dialectComboBox;
    private javax.swing.JLabel dialectLabel;
    private javax.swing.JLabel indentLabel;
    private javax.swing.JSpinner indentSpinner;
    // End of variables declaration//GEN-END:variables
}
